/******************************I2C***********************************/
/*********************************************************************
* Function:         void IICDelayUs(unsigned char x)
*
* PreCondition:     None 
*
* Input:  	    delay N Us
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function will delay N Us
*
* Note:			    None
********************************************************************/
void IICDelayUs(unsigned char x)
{ 
   while(--x != 0)  
     continue; 
}

/*********************************************************************
* Function:         void i2c_Stop(void)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function stops I2C
*
* Note:			    None
********************************************************************/
void i2c_Stop(void)
{
   SDA_LOW();                // ensure data is low first 
   SCL_LOW();     
   IICDelayUs(I2C_TM_DATA_SU);
   SCL_DIR = I2C_INPUT;      // float clock high 
   IICDelayUs(I2C_TM_STOP_SU);
   SDA_HIGH();               // the low->high data transistion
   IICDelayUs(I2C_TM_BUS_FREE); // bus free time before next start
   SDA_DIR = I2C_INPUT;      // float data high

   return;
}

/*********************************************************************
* Function:         void i2c_Restart(void)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function starts I2C
*
* Note:			    None
********************************************************************/
void i2c_Restart(void)
{
   SCL_LOW();                // ensure clock is low 
   SDA_HIGH();               // ensure data is high

   IICDelayUs(I2C_TM_DATA_SU);

   SCL_DIR = I2C_INPUT;      // clock pulse high
   IICDelayUs(I2C_TM_SCL_HIGH);

   SDA_LOW();                // the high->low transition
   IICDelayUs(I2C_TM_START_HD);
	#if defined(STACK_USE_UART) 
putrsUART("i2c restart...\r\n");
#endif
   return;
}

/*********************************************************************
* Function:         unsigned char i2c_SendByte(unsigned char byte)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function sends byte to I2C
*
* Note:			    None
********************************************************************/
unsigned char i2c_SendByte(unsigned char byte)
{
   signed char i;

   for(i=7; i>=0; i--)
   {
      SCL_LOW();               // drive clock low 
      
      /* data hold time = 0, send data now */
        SDA_DIR = ((byte>>i)&0x01);
        if ((byte>>i)&0x01) {      // bit to send
         SDA_HIGH();
        }else {
         SDA_LOW();
        }
      IICDelayUs(I2C_TM_DATA_SU);
      SCL_DIR = I2C_INPUT;         // float clock high

      if(i2c_WaitForSCL())         // wait for clock release
         return TRUE;              // bus error

      IICDelayUs(I2C_TM_SCL_HIGH);    // clock high time
   }
   
   return FALSE;
}

/*********************************************************************
* Function:         unsigned char i2c_SendAddress
*					(unsigned char address, unsigned char rw)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function sends address to I2C
*
* Note:			    None
********************************************************************/
unsigned char i2c_SendAddress(unsigned char address, unsigned char rw)
{
   return i2c_SendByte(address | (rw?1:0));
}

/*********************************************************************
* Function:         signed char i2c_ReadAcknowledge(void)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function sends byte to I2C
*
* Note:			    None
********************************************************************/
signed char i2c_ReadAcknowledge(void)
{
   unsigned char ack;

   SCL_LOW();                   // make clock is low
   SDA_DIR = I2C_INPUT;         // disable data line - listen for ack 
   IICDelayUs(I2C_TM_SCL_TO_DATA); // SCL low to data out valid
   SCL_DIR = I2C_INPUT;         // float clock high
   IICDelayUs(I2C_TM_DATA_SU);
   ack = SDA;                   // read the acknowledge

   /* wait for slave to release clock line after processing byte */
   if(i2c_WaitForSCL()) {  
	#if defined(STACK_USE_UART) 
putrsUART("read ack error\r\n");
#endif
      return I2C_ERROR;
}
   return ack;
}

/*********************************************************************
* Function:         int i2c_ReadByte(void)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function reads byte from I2C
*
* Note:			    None
********************************************************************/
int i2c_ReadByte(void)
{
   unsigned char i;
   unsigned char byte = 0;

   for(i=0; i<8; i++)
   {
      SCL_LOW();                 // drive clock low 
      IICDelayUs(I2C_TM_SCL_LOW);   // min clock low  period 
      SDA_DIR = I2C_INPUT;       // release data line

      SCL_DIR = I2C_INPUT;       // float clock high
      if(i2c_WaitForSCL()){
         return I2C_ERROR;
	#if defined(STACK_USE_UART) 
putrsUART("wait for scl read byte error\r\n");
#endif
}
      IICDelayUs(I2C_TM_SCL_HIGH);
      byte = byte << 1;          // read the next bit
      byte |= SDA;
   }
   return (int)byte;
}

/*********************************************************************
* Function:         void i2c_SendAcknowledge(unsigned char status)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function reads byte from I2C
*
* Note:			    None
********************************************************************/
void i2c_SendAcknowledge(unsigned char status)
{
   SCL_LOW();
   if ( status & 0x01) {
      SDA_LOW();             // drive line low -> more to come
   }else { 
      SDA_HIGH();
   }
   IICDelayUs(I2C_TM_DATA_SU);
   SCL_DIR = I2C_INPUT;      // float clock high
   IICDelayUs(I2C_TM_SCL_HIGH);
   return;
}      

/*********************************************************************
* Function:         signed char i2c_PutByte(unsigned char data)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function puts byte to I2C
*
* Note:			    None
********************************************************************/
signed char i2c_PutByte(unsigned char data)
{
   if(i2c_SendByte(data))
      return I2C_ERROR;
   return i2c_ReadAcknowledge();   // returns ack, ~ack
}

/*********************************************************************
* Function:         int i2c_GetByte(unsigned char more)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function gets byte from I2C
*
* Note:			    None
********************************************************************/
int i2c_GetByte(unsigned char more)
{
   int data;

   if((data = i2c_ReadByte()) == I2C_ERROR)
   {   return I2C_ERROR;
	#if defined(STACK_USE_UART) 
      putrsUART("Get Byte I2C_ERROR..\r\n");
#endif
}

   i2c_SendAcknowledge(more);

   return data;
}

/*********************************************************************
* Function:         int i2c_PutString
*					(unsigned char *str, unsigned char length)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function puts string to I2C
*
* Note:			    None
********************************************************************/
int i2c_PutString(unsigned char *str, unsigned char length)
{
   signed char error;

   while(length)
   {
      if((error = i2c_PutByte(*str)) == I2C_ERROR)
         return -(int)length;                 // bus error 
      else
         if(error)
            return (int)length;               // non acknowledge
      str++;
      length--;
   }

   return FALSE;                              // everything OK
}

/*********************************************************************
* Function:         int i2c_GetString
*					(unsigned char *str, unsigned char length)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function gets string from I2C
*
* Note:			    None
********************************************************************/
unsigned char i2c_GetString(unsigned char *str, unsigned char number)
{
   int byte;
int i=0;
   while(number)
   {
      //if((byte = i2c_GetByte(number-1)) == I2C_ERROR)
      if(number-1)
         byte=0x01;
      else
         byte=0x00;
      if((byte = i2c_GetByte(byte)) == I2C_ERROR){
         return number;                       // bus error
	#if defined(STACK_USE_UART) 
putrsUART("get byte error...\r\n");
#endif
}
      else{
         *str = (unsigned char)byte;
str++;
//rtc_register[i]=(unsigned char)byte;
//i++;

      
}
      number--;
   }

   return FALSE;                              // everything OK
}

/*********************************************************************
* Function:         unsigned char i2c_Open
*					(unsigned char address, unsigned char mode)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function opens I2C
*
* Note:			    None
********************************************************************/
unsigned char i2c_Open(unsigned char address, unsigned char mode)
{
   i2c_Start();
   i2c_SendAddress(address, mode);
   if(i2c_ReadAcknowledge()) 
      return TRUE;

   return FALSE;
}

/*********************************************************************
* Function:         unsigned char i2c_WaitForSCL(void)
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function checks whether I2C is busy 
*
* Note:			    None
********************************************************************/
unsigned char i2c_WaitForSCL(void)
{
   /* SCL_DIR should be input here */
   if (!SCL)
   {
      IICDelayUs(I2C_TM_SCL_TMO);
      if (!SCL)        // if the clock is still low -> bus error
         return TRUE;
   }
   return FALSE;
}

/*********************************************************************
* Function:         void i2c_Free()
*
* PreCondition:     None 
*
* Input:		    None
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		    This function frees I2C
*
* Note:			    None
********************************************************************/
void i2c_Free()
{
   unsigned char ucI;

   SDA_DIR=I2C_INPUT;
   for(ucI=0;ucI!=9;ucI++)
   {
      SCL_HIGH();
      IICDelayUs(5);
      SCL_LOW();
      IICDelayUs(5);
   }
}


/*********************************************************************
* Function:        LDByteWriteI2C()
*
* PreCondition:     None 
*
* Input:		    DeviceAddress Byte, 8 - bit RegisterAddress, data.
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		   Write a byte to low density device at address RegisterAddress
*
* Note:			    None
********************************************************************/
unsigned int LDByteWriteI2C(unsigned char DeviceAddress, unsigned char RegisterAddress, unsigned char data)
{
  
    if(i2c_Open(DeviceAddress,0x00)==FALSE)
      if(i2c_PutByte(RegisterAddress)==0)   
         if(i2c_PutByte(data)==0){ 
            i2c_Stop();
            return FALSE;
         }
         return TRUE;
}


/*********************************************************************
* Function:        LDByteReadI2C()
*
* PreCondition:     None 
*
* Input:		    DeviceAddress Byte, 8 - bit RegisterAddress, *Data, Length.
*
* Output:		    None
*
* Side Effects:	    None
*
* Overview:		  Performs a low density read of Length bytes and stores in *Data array
*				       starting at RegisterAddress.
*
* Note:			    None
********************************************************************/
unsigned int LDByteReadI2C(unsigned char DeviceAddress, unsigned char RegisterAddress, unsigned char *Data, unsigned char Length)
{
	
    if(i2c_Open(DeviceAddress,0x00)==FALSE){
     if(i2c_PutByte(RegisterAddress)==0){
         if(i2c_Open(DeviceAddress,0x01)==FALSE){
            *Data=i2c_GetByte(0);
             i2c_Stop();
             return FALSE;
               }
          }
      }
     return TRUE;
}
